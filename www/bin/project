#!/usr/local/bin/ruby

require 'optparse'
require 'pry'

options = {}

OptionParser.new do |opts|
  opts.banner = "Usage: project [options]"

  opts.on("-n", "New Project procedure.") do |o|
    options[:new] = o
  end

  opts.on("-u NAME", "Update Project procedure with name.") do |o|
    options[:update] = o
  end

  opts.on("-d", "Debug mode, log db interaction.") do |o|
    options[:debug] = o
  end
end.parse!

KURPEL_DB = "kurpelwoodworks.db"

unless File.exist?(KURPEL_DB)
  raise StandardError, sprintf("%s don't exists", KURPEL_DB)
end

require 'sequel'
require 'logger'
require 'tempfile'

DB = Sequel.connect("sqlite://#{KURPEL_DB}")
DB.loggers << Logger.new($stdout) if options.has_key? :debug

require_relative '../entities/project'

def read_line
  arg = nil

  $stdin.each do |line|
    p line
    arg = line.strip
    break
  end

  arg
end

if options.has_key? :new
  project = Project.new
  project_params = Project.columns.delete_if{|k| k == :id}
  enter_text_msg = "Enter value for %s"

  while true do
    project_params.each do |key|
      if key == :description
        description_tmp_file = Tempfile.new

        File.open(description_tmp_file.path, "w") do |f|
          p sprintf(enter_text_msg, key)
          f.write(sprintf(enter_text_msg, key))
        end

        system("vim #{description_tmp_file.path}")

        description_value = File.read(description_tmp_file.path)
        project[key] = description_value.strip

        p description_value

        project_params.delete(key)
      else
        p sprintf(enter_text_msg, key)
        arg = read_line

        unless arg.length == 0
          project[key] = arg
          project_params.delete(key)
        end
      end

      break
    end

    break if project_params.length == 0
  end

  if project.valid?
    project.save
    p "Successfully created project with name '#{project.name}'"
  else
    project.errors.each do |key, error|
      p "#{key.to_s} #{error.first}"
    end
  end
elsif options.has_key?(:update)
  p "UPDATE #{options[:update]}"
end
